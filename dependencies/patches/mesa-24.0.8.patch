diff --git a/src/amd/common/meson.build b/src/amd/common/meson.build
index 04154180264..8c2efd4176a 100644
--- a/src/amd/common/meson.build
+++ b/src/amd/common/meson.build
@@ -127,7 +127,9 @@ libamd_common = static_library(
   ],
   dependencies : [
     dep_thread, dep_elf, dep_libdrm_amdgpu, dep_valgrind,
-    idep_mesautil, idep_nir_headers, idep_nir
+    idep_mesautil.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_nir_headers,
+    idep_nir.partial_dependency(compile_args : true, link_args : true, includes : true)
   ],
   gnu_symbol_visibility : 'hidden',
   c_args : ['-DADDR_FASTCALL=']
diff --git a/src/amd/compiler/meson.build b/src/amd/compiler/meson.build
index f624d84626f..f17d5e500ec 100644
--- a/src/amd/compiler/meson.build
+++ b/src/amd/compiler/meson.build
@@ -92,7 +92,8 @@ _libaco = static_library(
    inc_include, inc_src, inc_amd, inc_amd_common,
   ],
   dependencies : [
-    dep_llvm, dep_thread, dep_valgrind, idep_nir_headers, idep_amdgfxregs_h, idep_mesautil,
+    dep_llvm, dep_thread, dep_valgrind, idep_nir_headers, idep_amdgfxregs_h,
+    idep_mesautil.partial_dependency(compile_args : true, link_args : true, includes : true),
   ],
   gnu_symbol_visibility : 'hidden',
   build_by_default : true,
diff --git a/src/amd/vulkan/meson.build b/src/amd/vulkan/meson.build
index 7aa8501d3d1..fb581a98337 100644
--- a/src/amd/vulkan/meson.build
+++ b/src/amd/vulkan/meson.build
@@ -210,8 +210,13 @@ libvulkan_radeon = shared_library(
   dependencies : [
     dep_llvm, dep_libdrm_amdgpu, dep_thread, dep_elf, dep_dl, dep_m,
     dep_valgrind, radv_deps, idep_aco,
-    idep_mesautil, idep_nir, idep_vulkan_util, idep_vulkan_wsi,
-    idep_vulkan_runtime, idep_amdgfxregs_h, idep_xmlconfig,
+    idep_mesautil.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_nir.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_vulkan_util,
+    idep_vulkan_wsi,
+    idep_vulkan_runtime,
+    idep_amdgfxregs_h,
+    idep_xmlconfig.partial_dependency(compile_args : true, link_args : true, includes : true),
     idep_vulkan_common_entrypoints_h, idep_vulkan_wsi_entrypoints_h
   ],
   c_args : [no_override_init_args, radv_flags, c_msvc_compat_args],
diff --git a/src/amd/vulkan/meta/radv_meta_clear.c b/src/amd/vulkan/meta/radv_meta_clear.c
index b10cfa8f74b..9685cc19808 100644
--- a/src/amd/vulkan/meta/radv_meta_clear.c
+++ b/src/amd/vulkan/meta/radv_meta_clear.c
@@ -1428,7 +1428,7 @@ gfx8_get_fast_clear_parameters(struct radv_device *device, const struct radv_ima
        iview->vk.format == VK_FORMAT_B5G6R5_UNORM_PACK16)
       extra_channel = -1;
    else if (desc->layout == UTIL_FORMAT_LAYOUT_PLAIN) {
-      if (vi_alpha_is_on_msb(device, iview->vk.format))
+      if (radv_vi_alpha_is_on_msb(device, iview->vk.format))
          extra_channel = desc->nr_channels - 1;
       else
          extra_channel = 0;
diff --git a/src/amd/vulkan/radix_sort/radix_sort_vk.c b/src/amd/vulkan/radix_sort/radix_sort_vk.c
index 70253884fc4..1e54c85b3ef 100644
--- a/src/amd/vulkan/radix_sort/radix_sort_vk.c
+++ b/src/amd/vulkan/radix_sort/radix_sort_vk.c
@@ -259,7 +259,7 @@ radix_sort_vk_create(VkDevice                           device,
     {
       plci.pPushConstantRanges = pcr + ii;
 
-      if (vkCreatePipelineLayout(device, &plci, NULL, rs->pipeline_layouts.handles + ii) != VK_SUCCESS)
+      if (radix_vkCreatePipelineLayout(device, &plci, NULL, rs->pipeline_layouts.handles + ii) != VK_SUCCESS)
         goto fail_layout;
     }
 
@@ -282,7 +282,7 @@ radix_sort_vk_create(VkDevice                           device,
       smci.codeSize = spv_sizes[ii];
       smci.pCode    = spv[ii];
 
-      if (vkCreateShaderModule(device, &smci, ac, sms + ii) != VK_SUCCESS)
+      if (radix_vkCreateShaderModule(device, &smci, ac, sms + ii) != VK_SUCCESS)
         goto fail_shader;
     }
 
@@ -358,7 +358,7 @@ radix_sort_vk_create(VkDevice                           device,
   //
   // Create the compute pipelines
   //
-  if (vkCreateComputePipelines(device, pc, pipeline_count, cpcis, ac, rs->pipelines.handles) != VK_SUCCESS)
+  if (radix_vkCreateComputePipelines(device, pc, pipeline_count, cpcis, ac, rs->pipelines.handles) != VK_SUCCESS)
     goto fail_pipeline;
 
   //
@@ -366,7 +366,7 @@ radix_sort_vk_create(VkDevice                           device,
   //
   for (uint32_t ii = 0; ii < pipeline_count; ii++)
     {
-      vkDestroyShaderModule(device, sms[ii], ac);
+      radix_vkDestroyShaderModule(device, sms[ii], ac);
     }
 
 #ifdef RS_VK_ENABLE_DEBUG_UTILS
@@ -397,17 +397,17 @@ radix_sort_vk_create(VkDevice                           device,
 fail_pipeline:
   for (uint32_t ii = 0; ii < pipeline_count; ii++)
     {
-      vkDestroyPipeline(device, rs->pipelines.handles[ii], ac);
+      radix_vkDestroyPipeline(device, rs->pipelines.handles[ii], ac);
     }
 fail_shader:
   for (uint32_t ii = 0; ii < pipeline_count; ii++)
     {
-      vkDestroyShaderModule(device, sms[ii], ac);
+      radix_vkDestroyShaderModule(device, sms[ii], ac);
     }
 fail_layout:
    for (uint32_t ii = 0; ii < pipeline_count; ii++)
     {
-      vkDestroyPipelineLayout(device, rs->pipeline_layouts.handles[ii], ac);
+      radix_vkDestroyPipelineLayout(device, rs->pipeline_layouts.handles[ii], ac);
     }
 
   free(rs);
@@ -425,13 +425,13 @@ radix_sort_vk_destroy(struct radix_sort_vk * rs, VkDevice d, VkAllocationCallbac
   // destroy pipelines
   for (uint32_t ii = 0; ii < pipeline_count; ii++)
     {
-      vkDestroyPipeline(d, rs->pipelines.handles[ii], ac);
+      radix_vkDestroyPipeline(d, rs->pipelines.handles[ii], ac);
     }
 
   // destroy pipeline layouts
   for (uint32_t ii = 0; ii < pipeline_count; ii++)
     {
-      vkDestroyPipelineLayout(d, rs->pipeline_layouts.handles[ii], ac);
+      radix_vkDestroyPipelineLayout(d, rs->pipeline_layouts.handles[ii], ac);
     }
 
   free(rs);
@@ -450,7 +450,7 @@ rs_get_devaddr(VkDevice device, VkDescriptorBufferInfo const * dbi)
     .buffer = dbi->buffer
   };
 
-  VkDeviceAddress const devaddr = vkGetBufferDeviceAddress(device, &bdai) + dbi->offset;
+  VkDeviceAddress const devaddr = radix_vkGetBufferDeviceAddress(device, &bdai) + dbi->offset;
 
   return devaddr;
 }
@@ -468,7 +468,7 @@ rs_ext_cmd_write_timestamp(struct radix_sort_vk_ext_timestamps * ext_timestamps,
   if ((ext_timestamps != NULL) &&
       (ext_timestamps->timestamps_set < ext_timestamps->timestamp_count))
     {
-      vkCmdWriteTimestamp(cb,
+      radix_vkCmdWriteTimestamp(cb,
                           pipeline_stage,
                           ext_timestamps->timestamps,
                           ext_timestamps->timestamps_set++);
@@ -679,16 +679,16 @@ radix_sort_vk_sort_devaddr(radix_sort_vk_t const *                   rs,
     .passes             = passes
   };
 
-  vkCmdPushConstants(cb,
+  radix_vkCmdPushConstants(cb,
                      rs->pipeline_layouts.named.histogram,
                      VK_SHADER_STAGE_COMPUTE_BIT,
                      0,
                      sizeof(push_histogram),
                      &push_histogram);
 
-  vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.histogram);
+  radix_vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.histogram);
 
-  vkCmdDispatch(cb, histo_blocks, 1, 1);
+  radix_vkCmdDispatch(cb, histo_blocks, 1, 1);
 
   ////////////////////////////////////////////////////////////////////////
   //
@@ -707,16 +707,16 @@ radix_sort_vk_sort_devaddr(radix_sort_vk_t const *                   rs,
     .devaddr_histograms = devaddr_histograms,
   };
 
-  vkCmdPushConstants(cb,
+  radix_vkCmdPushConstants(cb,
                      rs->pipeline_layouts.named.prefix,
                      VK_SHADER_STAGE_COMPUTE_BIT,
                      0,
                      sizeof(push_prefix),
                      &push_prefix);
 
-  vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.prefix);
+  radix_vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.prefix);
 
-  vkCmdDispatch(cb, passes, 1, 1);
+  radix_vkCmdDispatch(cb, passes, 1, 1);
 
   ////////////////////////////////////////////////////////////////////////
   //
@@ -746,14 +746,14 @@ radix_sort_vk_sort_devaddr(radix_sort_vk_t const *                   rs,
   {
     uint32_t const pass_dword = pass_idx / 4;
 
-    vkCmdPushConstants(cb,
+    radix_vkCmdPushConstants(cb,
                        rs->pipeline_layouts.named.scatter[pass_dword].even,
                        VK_SHADER_STAGE_COMPUTE_BIT,
                        0,
                        sizeof(push_scatter),
                        &push_scatter);
 
-    vkCmdBindPipeline(cb,
+    radix_vkCmdBindPipeline(cb,
                       VK_PIPELINE_BIND_POINT_COMPUTE,
                       rs->pipelines.named.scatter[pass_dword].even);
   }
@@ -762,7 +762,7 @@ radix_sort_vk_sort_devaddr(radix_sort_vk_t const *                   rs,
 
   while (true)
     {
-      vkCmdDispatch(cb, scatter_blocks, 1, 1);
+      radix_vkCmdDispatch(cb, scatter_blocks, 1, 1);
 
       //
       // Continue?
@@ -788,7 +788,7 @@ radix_sort_vk_sort_devaddr(radix_sort_vk_t const *                   rs,
       //
       VkPipelineLayout const pl = is_even ? rs->pipeline_layouts.named.scatter[pass_dword].even  //
                                           : rs->pipeline_layouts.named.scatter[pass_dword].odd;
-      vkCmdPushConstants(cb,
+      radix_vkCmdPushConstants(cb,
                          pl,
                          VK_SHADER_STAGE_COMPUTE_BIT,
                          OFFSETOF_MACRO(struct rs_push_scatter, devaddr_histograms),
@@ -801,7 +801,7 @@ radix_sort_vk_sort_devaddr(radix_sort_vk_t const *                   rs,
       VkPipeline const p = is_even ? rs->pipelines.named.scatter[pass_dword].even  //
                                    : rs->pipelines.named.scatter[pass_dword].odd;
 
-      vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, p);
+      radix_vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, p);
     }
 
 #ifdef RS_VK_ENABLE_EXTENSIONS
@@ -938,16 +938,16 @@ radix_sort_vk_sort_indirect_devaddr(radix_sort_vk_t const *
       .passes        = passes
     };
 
-    vkCmdPushConstants(cb,
+    radix_vkCmdPushConstants(cb,
                        rs->pipeline_layouts.named.init,
                        VK_SHADER_STAGE_COMPUTE_BIT,
                        0,
                        sizeof(push_init),
                        &push_init);
 
-    vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.init);
+    radix_vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.init);
 
-    vkCmdDispatch(cb, 1, 1, 1);
+    radix_vkCmdDispatch(cb, 1, 1, 1);
   }
 
 #ifdef RS_VK_ENABLE_EXTENSIONS
@@ -967,14 +967,14 @@ radix_sort_vk_sort_indirect_devaddr(radix_sort_vk_t const *
       .dword          = 0xFFFFFFFF
     };
 
-    vkCmdPushConstants(cb,
+    radix_vkCmdPushConstants(cb,
                        rs->pipeline_layouts.named.fill,
                        VK_SHADER_STAGE_COMPUTE_BIT,
                        0,
                        sizeof(push_pad),
                        &push_pad);
 
-    vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.fill);
+    radix_vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.fill);
 
     info->dispatch_indirect(cb, &info->indirect, offsetof(struct rs_indirect_info, dispatch.pad));
   }
@@ -992,14 +992,14 @@ radix_sort_vk_sort_indirect_devaddr(radix_sort_vk_t const *
       .dword          = 0
     };
 
-    vkCmdPushConstants(cb,
+    radix_vkCmdPushConstants(cb,
                        rs->pipeline_layouts.named.fill,
                        VK_SHADER_STAGE_COMPUTE_BIT,
                        0,
                        sizeof(push_zero),
                        &push_zero);
 
-    vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.fill);
+    radix_vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.fill);
 
     info->dispatch_indirect(cb, &info->indirect, offsetof(struct rs_indirect_info, dispatch.zero));
   }
@@ -1021,14 +1021,14 @@ radix_sort_vk_sort_indirect_devaddr(radix_sort_vk_t const *
       .passes             = passes
     };
 
-    vkCmdPushConstants(cb,
+    radix_vkCmdPushConstants(cb,
                        rs->pipeline_layouts.named.histogram,
                        VK_SHADER_STAGE_COMPUTE_BIT,
                        0,
                        sizeof(push_histogram),
                        &push_histogram);
 
-    vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.histogram);
+    radix_vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.histogram);
 
     info->dispatch_indirect(cb,
                             &info->indirect,
@@ -1049,16 +1049,16 @@ radix_sort_vk_sort_indirect_devaddr(radix_sort_vk_t const *
       .devaddr_histograms = devaddr_histograms,
     };
 
-    vkCmdPushConstants(cb,
+    radix_vkCmdPushConstants(cb,
                        rs->pipeline_layouts.named.prefix,
                        VK_SHADER_STAGE_COMPUTE_BIT,
                        0,
                        sizeof(push_prefix),
                        &push_prefix);
 
-    vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.prefix);
+    radix_vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, rs->pipelines.named.prefix);
 
-    vkCmdDispatch(cb, passes, 1, 1);
+    radix_vkCmdDispatch(cb, passes, 1, 1);
   }
 
 #ifdef RS_VK_ENABLE_EXTENSIONS
@@ -1088,14 +1088,14 @@ radix_sort_vk_sort_indirect_devaddr(radix_sort_vk_t const *
     {
       uint32_t const pass_dword = pass_idx / 4;
 
-      vkCmdPushConstants(cb,
+      radix_vkCmdPushConstants(cb,
                          rs->pipeline_layouts.named.scatter[pass_dword].even,
                          VK_SHADER_STAGE_COMPUTE_BIT,
                          0,
                          sizeof(push_scatter),
                          &push_scatter);
 
-      vkCmdBindPipeline(cb,
+      radix_vkCmdBindPipeline(cb,
                         VK_PIPELINE_BIND_POINT_COMPUTE,
                         rs->pipelines.named.scatter[pass_dword].even);
     }
@@ -1134,7 +1134,7 @@ radix_sort_vk_sort_indirect_devaddr(radix_sort_vk_t const *
         VkPipelineLayout const pl = is_even
                                       ? rs->pipeline_layouts.named.scatter[pass_dword].even  //
                                       : rs->pipeline_layouts.named.scatter[pass_dword].odd;
-        vkCmdPushConstants(
+        radix_vkCmdPushConstants(
           cb,
           pl,
           VK_SHADER_STAGE_COMPUTE_BIT,
@@ -1148,7 +1148,7 @@ radix_sort_vk_sort_indirect_devaddr(radix_sort_vk_t const *
         VkPipeline const p = is_even ? rs->pipelines.named.scatter[pass_dword].even  //
                                      : rs->pipelines.named.scatter[pass_dword].odd;
 
-        vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, p);
+        radix_vkCmdBindPipeline(cb, VK_PIPELINE_BIND_POINT_COMPUTE, p);
       }
   }
 
@@ -1177,7 +1177,7 @@ radix_sort_vk_fill_buffer(VkCommandBuffer                     cb,
                           VkDeviceSize                        size,
                           uint32_t                            data)
 {
-  vkCmdFillBuffer(cb, buffer_info->buffer, buffer_info->offset + offset, size, data);
+  radix_vkCmdFillBuffer(cb, buffer_info->buffer, buffer_info->offset + offset, size, data);
 }
 
 //
@@ -1221,7 +1221,7 @@ radix_sort_vk_dispatch_indirect(VkCommandBuffer                     cb,
                                 radix_sort_vk_buffer_info_t const * buffer_info,
                                 VkDeviceSize                        offset)
 {
-  vkCmdDispatchIndirect(cb, buffer_info->buffer, buffer_info->offset + offset);
+  radix_vkCmdDispatchIndirect(cb, buffer_info->buffer, buffer_info->offset + offset);
 }
 
 //
diff --git a/src/amd/vulkan/radix_sort/radix_sort_vk_devaddr.h b/src/amd/vulkan/radix_sort/radix_sort_vk_devaddr.h
index 23dd808249a..98fc6c67db7 100644
--- a/src/amd/vulkan/radix_sort/radix_sort_vk_devaddr.h
+++ b/src/amd/vulkan/radix_sort/radix_sort_vk_devaddr.h
@@ -89,6 +89,62 @@ radix_sort_vk_sort_indirect_devaddr(radix_sort_vk_t const *
                                     VkCommandBuffer                                    cb,
                                     VkDeviceAddress *                                  keyvals_sorted);
 
+VKAPI_ATTR VkResult VKAPI_CALL
+radix_vkCreateShaderModule(VkDevice _device, const VkShaderModuleCreateInfo *pCreateInfo,
+                     const VkAllocationCallbacks *pAllocator, VkShaderModule *pShaderModule);
+
+VKAPI_ATTR void VKAPI_CALL
+radix_vkDestroyShaderModule(VkDevice _device, VkShaderModule shaderModule,
+                      const VkAllocationCallbacks *pAllocator);
+
+VKAPI_ATTR VkResult VKAPI_CALL
+radix_vkCreatePipelineLayout(VkDevice _device, const VkPipelineLayoutCreateInfo *pCreateInfo,
+                       const VkAllocationCallbacks *pAllocator, VkPipelineLayout *pPipelineLayout);
+
+VKAPI_ATTR void VKAPI_CALL
+radix_vkDestroyPipelineLayout(VkDevice _device, VkPipelineLayout pipelineLayout,
+                        const VkAllocationCallbacks *pAllocator);
+
+VKAPI_ATTR VkResult VKAPI_CALL
+radix_vkCreateComputePipelines(VkDevice _device, VkPipelineCache pipelineCache, uint32_t createInfoCount,
+                         const VkComputePipelineCreateInfo *pCreateInfos,
+                         const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines);
+
+VKAPI_ATTR void VKAPI_CALL
+radix_vkDestroyPipeline(VkDevice _device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator);
+
+VKAPI_ATTR void VKAPI_CALL
+radix_vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask,
+                     VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags,
+                     uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers,
+                     uint32_t bufferMemoryBarrierCount,
+                     const VkBufferMemoryBarrier *pBufferMemoryBarriers,
+                     uint32_t imageMemoryBarrierCount,
+                     const VkImageMemoryBarrier *pImageMemoryBarriers);
+
+VKAPI_ATTR void VKAPI_CALL
+radix_vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout,
+                   VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size,
+                   const void *pValues);
+
+VKAPI_ATTR void VKAPI_CALL
+radix_vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
+                  VkPipeline pipeline);
+
+VKAPI_ATTR void VKAPI_CALL
+radix_vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY,
+              uint32_t groupCountZ);
+
+VKAPI_ATTR VkDeviceAddress VKAPI_CALL
+radix_vkGetBufferDeviceAddress(VkDevice _device, const VkBufferDeviceAddressInfo *pInfo);
+
+VKAPI_ATTR void VKAPI_CALL
+radix_vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset,
+                VkDeviceSize size, uint32_t data);
+
+VKAPI_ATTR void VKAPI_CALL
+radix_vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
+
 //
 // clang-format on
 //
diff --git a/src/amd/vulkan/radix_sort/radv_radix_sort.c b/src/amd/vulkan/radix_sort/radv_radix_sort.c
index 061461432c8..824521c1fb5 100644
--- a/src/amd/vulkan/radix_sort/radv_radix_sort.c
+++ b/src/amd/vulkan/radix_sort/radv_radix_sort.c
@@ -98,7 +98,7 @@ radv_create_radix_sort_u64(VkDevice device, VkAllocationCallbacks const *ac, VkP
 }
 
 VKAPI_ATTR VkResult VKAPI_CALL
-vkCreateShaderModule(VkDevice _device, const VkShaderModuleCreateInfo *pCreateInfo,
+radix_vkCreateShaderModule(VkDevice _device, const VkShaderModuleCreateInfo *pCreateInfo,
                      const VkAllocationCallbacks *pAllocator, VkShaderModule *pShaderModule)
 {
    RADV_FROM_HANDLE(radv_device, device, _device);
@@ -107,7 +107,7 @@ vkCreateShaderModule(VkDevice _device, const VkShaderModuleCreateInfo *pCreateIn
 }
 
 VKAPI_ATTR void VKAPI_CALL
-vkDestroyShaderModule(VkDevice _device, VkShaderModule shaderModule,
+radix_vkDestroyShaderModule(VkDevice _device, VkShaderModule shaderModule,
                       const VkAllocationCallbacks *pAllocator)
 {
    RADV_FROM_HANDLE(radv_device, device, _device);
@@ -115,7 +115,7 @@ vkDestroyShaderModule(VkDevice _device, VkShaderModule shaderModule,
 }
 
 VKAPI_ATTR VkResult VKAPI_CALL
-vkCreatePipelineLayout(VkDevice _device, const VkPipelineLayoutCreateInfo *pCreateInfo,
+radix_vkCreatePipelineLayout(VkDevice _device, const VkPipelineLayoutCreateInfo *pCreateInfo,
                        const VkAllocationCallbacks *pAllocator, VkPipelineLayout *pPipelineLayout)
 {
    RADV_FROM_HANDLE(radv_device, device, _device);
@@ -124,7 +124,7 @@ vkCreatePipelineLayout(VkDevice _device, const VkPipelineLayoutCreateInfo *pCrea
 }
 
 VKAPI_ATTR void VKAPI_CALL
-vkDestroyPipelineLayout(VkDevice _device, VkPipelineLayout pipelineLayout,
+radix_vkDestroyPipelineLayout(VkDevice _device, VkPipelineLayout pipelineLayout,
                         const VkAllocationCallbacks *pAllocator)
 {
    RADV_FROM_HANDLE(radv_device, device, _device);
@@ -132,7 +132,7 @@ vkDestroyPipelineLayout(VkDevice _device, VkPipelineLayout pipelineLayout,
 }
 
 VKAPI_ATTR VkResult VKAPI_CALL
-vkCreateComputePipelines(VkDevice _device, VkPipelineCache pipelineCache, uint32_t createInfoCount,
+radix_vkCreateComputePipelines(VkDevice _device, VkPipelineCache pipelineCache, uint32_t createInfoCount,
                          const VkComputePipelineCreateInfo *pCreateInfos,
                          const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
 {
@@ -142,14 +142,14 @@ vkCreateComputePipelines(VkDevice _device, VkPipelineCache pipelineCache, uint32
 }
 
 VKAPI_ATTR void VKAPI_CALL
-vkDestroyPipeline(VkDevice _device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator)
+radix_vkDestroyPipeline(VkDevice _device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator)
 {
    RADV_FROM_HANDLE(radv_device, device, _device);
    device->vk.dispatch_table.DestroyPipeline(_device, pipeline, pAllocator);
 }
 
 VKAPI_ATTR void VKAPI_CALL
-vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask,
+radix_vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask,
                      VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags,
                      uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers,
                      uint32_t bufferMemoryBarrierCount,
@@ -165,7 +165,7 @@ vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStag
 }
 
 VKAPI_ATTR void VKAPI_CALL
-vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout,
+radix_vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout,
                    VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size,
                    const void *pValues)
 {
@@ -175,7 +175,7 @@ vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout,
 }
 
 VKAPI_ATTR void VKAPI_CALL
-vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
+radix_vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint,
                   VkPipeline pipeline)
 {
    RADV_FROM_HANDLE(radv_cmd_buffer, cmd_buffer, commandBuffer);
@@ -184,7 +184,7 @@ vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBin
 }
 
 VKAPI_ATTR void VKAPI_CALL
-vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY,
+radix_vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY,
               uint32_t groupCountZ)
 {
    RADV_FROM_HANDLE(radv_cmd_buffer, cmd_buffer, commandBuffer);
@@ -193,14 +193,14 @@ vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t grou
 }
 
 VKAPI_ATTR VkDeviceAddress VKAPI_CALL
-vkGetBufferDeviceAddress(VkDevice _device, const VkBufferDeviceAddressInfo *pInfo)
+radix_vkGetBufferDeviceAddress(VkDevice _device, const VkBufferDeviceAddressInfo *pInfo)
 {
    RADV_FROM_HANDLE(radv_device, device, _device);
    return device->vk.dispatch_table.GetBufferDeviceAddress(_device, pInfo);
 }
 
 VKAPI_ATTR void VKAPI_CALL
-vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset,
+radix_vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset,
                 VkDeviceSize size, uint32_t data)
 {
    RADV_FROM_HANDLE(radv_cmd_buffer, cmd_buffer, commandBuffer);
@@ -209,7 +209,7 @@ vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize
 }
 
 VKAPI_ATTR void VKAPI_CALL
-vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
+radix_vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
 {
    RADV_FROM_HANDLE(radv_cmd_buffer, cmd_buffer, commandBuffer);
    cmd_buffer->device->vk.dispatch_table.CmdDispatchIndirect(commandBuffer, buffer, offset);
diff --git a/src/amd/vulkan/radv_image.c b/src/amd/vulkan/radv_image.c
index 52965f725ab..fb87a268052 100644
--- a/src/amd/vulkan/radv_image.c
+++ b/src/amd/vulkan/radv_image.c
@@ -720,7 +720,7 @@ radv_compose_swizzle(const struct util_format_description *desc, const VkCompone
 }
 
 bool
-vi_alpha_is_on_msb(const struct radv_device *device, const VkFormat format)
+radv_vi_alpha_is_on_msb(const struct radv_device *device, const VkFormat format)
 {
    if (device->physical_device->rad_info.gfx_level >= GFX11)
       return false;
diff --git a/src/amd/vulkan/radv_image_view.c b/src/amd/vulkan/radv_image_view.c
index a8e67016ec8..91803bbb142 100644
--- a/src/amd/vulkan/radv_image_view.c
+++ b/src/amd/vulkan/radv_image_view.c
@@ -344,7 +344,7 @@ gfx10_make_texture_descriptor(struct radv_device *device, struct radv_image *ima
       state[6] |=
          S_00A018_MAX_UNCOMPRESSED_BLOCK_SIZE(V_028C78_MAX_BLOCK_SIZE_256B) |
          S_00A018_MAX_COMPRESSED_BLOCK_SIZE(image->planes[0].surface.u.gfx9.color.dcc.max_compressed_block_size) |
-         S_00A018_ALPHA_IS_ON_MSB(vi_alpha_is_on_msb(device, vk_format));
+         S_00A018_ALPHA_IS_ON_MSB(radv_vi_alpha_is_on_msb(device, vk_format));
    }
 
    if (radv_image_get_iterate256(device, image)) {
@@ -502,7 +502,7 @@ gfx6_make_texture_descriptor(struct radv_device *device, struct radv_image *imag
       state[5] |= S_008F24_LAST_ARRAY(last_layer);
    }
    if (!(image->planes[0].surface.flags & RADEON_SURF_Z_OR_SBUFFER) && image->planes[0].surface.meta_offset) {
-      state[6] = S_008F28_ALPHA_IS_ON_MSB(vi_alpha_is_on_msb(device, vk_format));
+      state[6] = S_008F28_ALPHA_IS_ON_MSB(radv_vi_alpha_is_on_msb(device, vk_format));
    } else {
       if (device->instance->drirc.disable_aniso_single_level) {
          /* The last dword is unused by hw. The shader uses it to clear
diff --git a/src/amd/vulkan/radv_instance.c b/src/amd/vulkan/radv_instance.c
index 652013bd250..6e479babbbc 100644
--- a/src/amd/vulkan/radv_instance.c
+++ b/src/amd/vulkan/radv_instance.c
@@ -427,7 +427,11 @@ radv_GetInstanceProcAddr(VkInstance _instance, const char *pName)
  */
 PUBLIC
 VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
-vk_icdGetInstanceProcAddr(VkInstance instance, const char *pName)
+radeon_vk_icdGetInstanceProcAddr(VkInstance instance, const char *pName);
+
+PUBLIC
+VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
+radeon_vk_icdGetInstanceProcAddr(VkInstance instance, const char *pName)
 {
    return radv_GetInstanceProcAddr(instance, pName);
 }
diff --git a/src/amd/vulkan/radv_private.h b/src/amd/vulkan/radv_private.h
index 74f5cbb7cb5..9bc42771d41 100644
--- a/src/amd/vulkan/radv_private.h
+++ b/src/amd/vulkan/radv_private.h
@@ -2722,7 +2722,7 @@ VkResult radv_image_create(VkDevice _device, const struct radv_image_create_info
 bool radv_are_formats_dcc_compatible(const struct radv_physical_device *pdev, const void *pNext, VkFormat format,
                                      VkImageCreateFlags flags, bool *sign_reinterpret);
 
-bool vi_alpha_is_on_msb(const struct radv_device *device, const VkFormat format);
+bool radv_vi_alpha_is_on_msb(const struct radv_device *device, const VkFormat format);
 
 unsigned radv_get_dcc_max_uncompressed_block_size(const struct radv_device *device, const struct radv_image *image);
 
diff --git a/src/amd/vulkan/radv_sdma.c b/src/amd/vulkan/radv_sdma.c
index c086104d673..3dd0a09299e 100644
--- a/src/amd/vulkan/radv_sdma.c
+++ b/src/amd/vulkan/radv_sdma.c
@@ -204,7 +204,7 @@ radv_sdma_get_metadata_config(const struct radv_device *const device, const stru
 
    const uint32_t data_format =
       ac_get_cb_format(device->physical_device->rad_info.gfx_level, vk_format_to_pipe_format(format));
-   const uint32_t alpha_is_on_msb = vi_alpha_is_on_msb(device, format);
+   const uint32_t alpha_is_on_msb = radv_vi_alpha_is_on_msb(device, format);
    const uint32_t number_type = radv_translate_buffer_numformat(desc, vk_format_get_first_non_void_channel(format));
    const uint32_t surface_type = radv_sdma_surface_type_from_aspect_mask(aspect_mask);
    const uint32_t max_comp_block_size = surf->u.gfx9.color.dcc.max_compressed_block_size;
diff --git a/src/gallium/drivers/iris/iris_blorp.c b/src/gallium/drivers/iris/iris_blorp.c
index 5e8b35815d8..1745454bc65 100644
--- a/src/gallium/drivers/iris/iris_blorp.c
+++ b/src/gallium/drivers/iris/iris_blorp.c
@@ -320,17 +320,17 @@ iris_blorp_exec_render(struct blorp_batch *blorp_batch,
 
    if (params->depth.enabled &&
        !(blorp_batch->flags & BLORP_BATCH_NO_EMIT_DEPTH_STENCIL))
-      genX(emit_depth_state_workarounds)(ice, batch, &params->depth.surf);
+      genX(iris_emit_depth_state_workarounds)(ice, batch, &params->depth.surf);
 
    iris_require_command_space(batch, 1400);
 
 #if GFX_VER == 8
-   genX(update_pma_fix)(ice, batch, false);
+   genX(iris_update_pma_fix)(ice, batch, false);
 #endif
 
    const unsigned scale = params->fast_clear_op ? UINT_MAX : 1;
    if (ice->state.current_hash_scale != scale) {
-      genX(emit_hashing_mode)(ice, batch, params->x1 - params->x0,
+      genX(iris_emit_hashing_mode)(ice, batch, params->x1 - params->x0,
                               params->y1 - params->y0, scale);
    }
 
@@ -342,7 +342,7 @@ iris_blorp_exec_render(struct blorp_batch *blorp_batch,
 #endif
 
 #if GFX_VER >= 12
-   genX(invalidate_aux_map_state)(batch);
+   genX(iris_invalidate_aux_map_state)(batch);
 #endif
 
    iris_handle_always_flush_cache(batch);
@@ -496,7 +496,7 @@ blorp_measure_end(struct blorp_batch *blorp_batch,
 }
 
 void
-genX(init_blorp)(struct iris_context *ice)
+genX(iris_init_blorp)(struct iris_context *ice)
 {
    struct iris_screen *screen = (struct iris_screen *)ice->ctx.screen;
 
@@ -513,7 +513,7 @@ blorp_emit_pre_draw(struct blorp_batch *blorp_batch, const struct blorp_params *
 {
    struct iris_batch *batch = blorp_batch->driver_batch;
    blorp_measure_start(blorp_batch, params);
-   genX(maybe_emit_breakpoint)(batch, true);
+   genX(iris_maybe_emit_breakpoint)(batch, true);
 }
 
 static void
@@ -522,7 +522,7 @@ blorp_emit_post_draw(struct blorp_batch *blorp_batch, const struct blorp_params
    struct iris_batch *batch = blorp_batch->driver_batch;
 
    // A _3DPRIM_RECTLIST is a MESA_PRIM_QUAD_STRIP with a implied vertex
-   genX(emit_3dprimitive_was)(batch, NULL, MESA_PRIM_QUAD_STRIP, 3);
-   genX(maybe_emit_breakpoint)(batch, false);
+   genX(iris_emit_3dprimitive_was)(batch, NULL, MESA_PRIM_QUAD_STRIP, 3);
+   genX(iris_maybe_emit_breakpoint)(batch, false);
    blorp_measure_end(blorp_batch, params);
 }
diff --git a/src/gallium/drivers/iris/iris_context.c b/src/gallium/drivers/iris/iris_context.c
index 016bc849ee3..f17616eee64 100644
--- a/src/gallium/drivers/iris/iris_context.c
+++ b/src/gallium/drivers/iris/iris_context.c
@@ -257,22 +257,22 @@ iris_destroy_context(struct pipe_context *ctx)
 #define genX_call(devinfo, func, ...)             \
    switch ((devinfo)->verx10) {                   \
    case 200:                                      \
-      gfx20_##func(__VA_ARGS__);                  \
+      gfx20_iris_##func(__VA_ARGS__);                  \
       break;                                      \
    case 125:                                      \
-      gfx125_##func(__VA_ARGS__);                 \
+      gfx125_iris_##func(__VA_ARGS__);                 \
       break;                                      \
    case 120:                                      \
-      gfx12_##func(__VA_ARGS__);                  \
+      gfx12_iris_##func(__VA_ARGS__);                  \
       break;                                      \
    case 110:                                      \
-      gfx11_##func(__VA_ARGS__);                  \
+      gfx11_iris_##func(__VA_ARGS__);                  \
       break;                                      \
    case 90:                                       \
-      gfx9_##func(__VA_ARGS__);                   \
+      gfx9_iris_##func(__VA_ARGS__);                   \
       break;                                      \
    case 80:                                       \
-      gfx8_##func(__VA_ARGS__);                   \
+      gfx8_iris_##func(__VA_ARGS__);                   \
       break;                                      \
    default:                                       \
       unreachable("Unknown hardware generation"); \
diff --git a/src/gallium/drivers/iris/iris_context.h b/src/gallium/drivers/iris/iris_context.h
index 7d154ddfb1c..74ab50aefc8 100644
--- a/src/gallium/drivers/iris/iris_context.h
+++ b/src/gallium/drivers/iris/iris_context.h
@@ -1164,7 +1164,7 @@ int iris_get_driver_query_group_info(struct pipe_screen *pscreen,
                                      struct pipe_driver_query_group_info *info);
 
 /* iris_state.c */
-void gfx9_toggle_preemption(struct iris_context *ice,
+void gfx9_iris_toggle_preemption(struct iris_context *ice,
                             struct iris_batch *batch,
                             const struct pipe_draw_info *draw);
 static const bool
diff --git a/src/gallium/drivers/iris/iris_draw.c b/src/gallium/drivers/iris/iris_draw.c
index bc897ba0f7d..bedba8b5467 100644
--- a/src/gallium/drivers/iris/iris_draw.c
+++ b/src/gallium/drivers/iris/iris_draw.c
@@ -289,7 +289,7 @@ iris_draw_vbo(struct pipe_context *ctx, const struct pipe_draw_info *info,
    iris_update_draw_info(ice, info);
 
    if (devinfo->ver == 9)
-      gfx9_toggle_preemption(ice, batch, info);
+      gfx9_iris_toggle_preemption(ice, batch, info);
 
    iris_update_compiled_shaders(ice);
 
diff --git a/src/gallium/drivers/iris/iris_genx_protos.h b/src/gallium/drivers/iris/iris_genx_protos.h
index 44c5d427ce6..4f22084f649 100644
--- a/src/gallium/drivers/iris/iris_genx_protos.h
+++ b/src/gallium/drivers/iris/iris_genx_protos.h
@@ -28,45 +28,45 @@
  */
 
 /* iris_state.c */
-void genX(init_state)(struct iris_context *ice);
-void genX(init_screen_state)(struct iris_screen *screen);
-void genX(emit_hashing_mode)(struct iris_context *ice,
+void genX(iris_init_state)(struct iris_context *ice);
+void genX(iris_init_screen_state)(struct iris_screen *screen);
+void genX(iris_emit_hashing_mode)(struct iris_context *ice,
                              struct iris_batch *batch,
                              unsigned width, unsigned height,
                              unsigned scale);
-void genX(emit_depth_state_workarounds)(struct iris_context *ice,
+void genX(iris_emit_depth_state_workarounds)(struct iris_context *ice,
                                         struct iris_batch *batch,
                                         const struct isl_surf *surf);
-void genX(update_pma_fix)(struct iris_context *ice,
+void genX(iris_update_pma_fix)(struct iris_context *ice,
                           struct iris_batch *batch,
                           bool enable);
 
-void genX(invalidate_aux_map_state)(struct iris_batch *batch);
+void genX(iris_invalidate_aux_map_state)(struct iris_batch *batch);
 
-void genX(emit_breakpoint)(struct iris_batch *batch, bool emit_before_draw);
-void genX(emit_3dprimitive_was)(struct iris_batch *batch,
-                                const struct pipe_draw_indirect_info *indirect,
-                                uint32_t primitive_topology,
-                                uint32_t vertex_count);
+void genX(iris_emit_breakpoint)(struct iris_batch *batch, bool emit_before_draw);
+void genX(iris_emit_3dprimitive_was)(struct iris_batch *batch,
+                                     const struct pipe_draw_indirect_info *indirect,
+                                     uint32_t primitive_topology,
+                                     uint32_t vertex_count);
 
 static inline void
-genX(maybe_emit_breakpoint)(struct iris_batch *batch,
-                            bool emit_before_draw)
+genX(iris_maybe_emit_breakpoint)(struct iris_batch *batch,
+                                 bool emit_before_draw)
 {
    if (INTEL_DEBUG(DEBUG_DRAW_BKP))
-      genX(emit_breakpoint)(batch, emit_before_draw);
+      genX(iris_emit_breakpoint)(batch, emit_before_draw);
 }
 
 
 /* iris_blorp.c */
-void genX(init_blorp)(struct iris_context *ice);
+void genX(iris_init_blorp)(struct iris_context *ice);
 
 /* iris_query.c */
-void genX(init_query)(struct iris_context *ice);
-void genX(math_add32_gpr0)(struct iris_context *ice,
+void genX(iris_init_query)(struct iris_context *ice);
+void genX(iris_math_add32_gpr0)(struct iris_context *ice,
                            struct iris_batch *batch,
                            uint32_t x);
-void genX(math_div32_gpr0)(struct iris_context *ice,
+void genX(iris_math_div32_gpr0)(struct iris_context *ice,
                            struct iris_batch *batch,
                            uint32_t D);
 
diff --git a/src/gallium/drivers/iris/iris_query.c b/src/gallium/drivers/iris/iris_query.c
index 6ea9c8917e6..a629a82853d 100644
--- a/src/gallium/drivers/iris/iris_query.c
+++ b/src/gallium/drivers/iris/iris_query.c
@@ -876,7 +876,7 @@ iris_render_condition(struct pipe_context *ctx,
 }
 
 void
-genX(init_query)(struct iris_context *ice)
+genX(iris_init_query)(struct iris_context *ice)
 {
    struct pipe_context *ctx = &ice->ctx;
 
diff --git a/src/gallium/drivers/iris/iris_screen.c b/src/gallium/drivers/iris/iris_screen.c
index 5d8c3b49da6..9148502cdda 100644
--- a/src/gallium/drivers/iris/iris_screen.c
+++ b/src/gallium/drivers/iris/iris_screen.c
@@ -63,22 +63,22 @@
 #define genX_call(devinfo, func, ...)             \
    switch ((devinfo)->verx10) {                   \
    case 200:                                      \
-      gfx20_##func(__VA_ARGS__);                  \
+      gfx20_iris_##func(__VA_ARGS__);                  \
       break;                                      \
    case 125:                                      \
-      gfx125_##func(__VA_ARGS__);                 \
+      gfx125_iris_##func(__VA_ARGS__);                 \
       break;                                      \
    case 120:                                      \
-      gfx12_##func(__VA_ARGS__);                  \
+      gfx12_iris_##func(__VA_ARGS__);                  \
       break;                                      \
    case 110:                                      \
-      gfx11_##func(__VA_ARGS__);                  \
+      gfx11_iris_##func(__VA_ARGS__);                  \
       break;                                      \
    case 90:                                       \
-      gfx9_##func(__VA_ARGS__);                   \
+      gfx9_iris_##func(__VA_ARGS__);                   \
       break;                                      \
    case 80:                                       \
-      gfx8_##func(__VA_ARGS__);                   \
+      gfx8_iris_##func(__VA_ARGS__);                   \
       break;                                      \
    default:                                       \
       unreachable("Unknown hardware generation"); \
diff --git a/src/gallium/drivers/iris/iris_state.c b/src/gallium/drivers/iris/iris_state.c
index 276949aaca9..0bf45227196 100644
--- a/src/gallium/drivers/iris/iris_state.c
+++ b/src/gallium/drivers/iris/iris_state.c
@@ -2022,7 +2022,7 @@ want_pma_fix(struct iris_context *ice)
 #endif
 
 void
-genX(update_pma_fix)(struct iris_context *ice,
+genX(iris_update_pma_fix)(struct iris_context *ice,
                      struct iris_batch *batch,
                      bool enable)
 {
@@ -6208,7 +6208,7 @@ invalidate_aux_map_state_per_engine(struct iris_batch *batch)
 }
 
 void
-genX(invalidate_aux_map_state)(struct iris_batch *batch)
+genX(iris_invalidate_aux_map_state)(struct iris_batch *batch)
 {
    struct iris_screen *screen = batch->screen;
    void *aux_map_ctx = iris_bufmgr_get_aux_map_context(screen->bufmgr);
@@ -6408,7 +6408,7 @@ emit_push_constant_packet_all(struct iris_context *ice,
 #endif
 
 void
-genX(emit_depth_state_workarounds)(struct iris_context *ice,
+genX(iris_emit_depth_state_workarounds)(struct iris_context *ice,
                                    struct iris_batch *batch,
                                    const struct isl_surf *surf)
 {
@@ -7697,7 +7697,7 @@ iris_upload_dirty_render_state(struct iris_context *ice,
       }
 
       if (zres)
-         genX(emit_depth_state_workarounds)(ice, batch, &zres->surf);
+         genX(iris_emit_depth_state_workarounds)(ice, batch, &zres->surf);
 
       if (intel_needs_workaround(batch->screen->devinfo, 1408224581) ||
           intel_needs_workaround(batch->screen->devinfo, 14014097488)) {
@@ -8053,15 +8053,15 @@ iris_upload_dirty_render_state(struct iris_context *ice,
 #if GFX_VER == 8
    if (dirty & IRIS_DIRTY_PMA_FIX) {
       bool enable = want_pma_fix(ice);
-      genX(update_pma_fix)(ice, batch, enable);
+      genX(iris_update_pma_fix)(ice, batch, enable);
    }
 #endif
 
    if (ice->state.current_hash_scale != 1)
-      genX(emit_hashing_mode)(ice, batch, UINT_MAX, UINT_MAX, 1);
+      genX(iris_emit_hashing_mode)(ice, batch, UINT_MAX, UINT_MAX, 1);
 
 #if GFX_VER >= 12
-   genX(invalidate_aux_map_state)(batch);
+   genX(iris_invalidate_aux_map_state)(batch);
 #endif
 }
 
@@ -8095,7 +8095,7 @@ point_or_line_list(enum mesa_prim prim_type)
 }
 
 void
-genX(emit_breakpoint)(struct iris_batch *batch, bool emit_before_draw)
+genX(iris_emit_breakpoint)(struct iris_batch *batch, bool emit_before_draw)
 {
    struct iris_context *ice = batch->ice;
    uint32_t draw_count = emit_before_draw ?
@@ -8117,10 +8117,10 @@ genX(emit_breakpoint)(struct iris_batch *batch, bool emit_before_draw)
 }
 
 void
-genX(emit_3dprimitive_was)(struct iris_batch *batch,
-                           const struct pipe_draw_indirect_info *indirect,
-                           uint32_t primitive_type,
-                           uint32_t vertex_count)
+genX(iris_emit_3dprimitive_was)(struct iris_batch *batch,
+                                const struct pipe_draw_indirect_info *indirect,
+                                uint32_t primitive_type,
+                                uint32_t vertex_count)
 {
    UNUSED const struct intel_device_info *devinfo = batch->screen->devinfo;
    UNUSED const struct iris_context *ice = batch->ice;
@@ -8371,7 +8371,7 @@ iris_upload_render_state(struct iris_context *ice,
 
    iris_measure_snapshot(ice, batch, INTEL_SNAPSHOT_DRAW, draw, indirect, sc);
 
-   genX(maybe_emit_breakpoint)(batch, true);
+   genX(iris_maybe_emit_breakpoint)(batch, true);
 
    iris_emit_cmd(batch, GENX(3DPRIMITIVE), prim) {
       prim.VertexAccessType = draw->index_size > 0 ? RANDOM : SEQUENTIAL;
@@ -8394,8 +8394,8 @@ iris_upload_render_state(struct iris_context *ice,
       }
    }
 
-   genX(emit_3dprimitive_was)(batch, indirect, ice->state.prim_mode, sc->count);
-   genX(maybe_emit_breakpoint)(batch, false);
+   genX(iris_emit_3dprimitive_was)(batch, indirect, ice->state.prim_mode, sc->count);
+   genX(iris_maybe_emit_breakpoint)(batch, false);
 
    iris_batch_sync_region_end(batch);
 
@@ -8509,7 +8509,7 @@ iris_upload_indirect_render_state(struct iris_context *ice,
 
    iris_measure_snapshot(ice, batch, INTEL_SNAPSHOT_DRAW, draw, indirect, sc);
 
-   genX(maybe_emit_breakpoint)(batch, true);
+   genX(iris_maybe_emit_breakpoint)(batch, true);
 
    iris_emit_cmd(batch, GENX(EXECUTE_INDIRECT_DRAW), ind) {
       ind.ArgumentFormat             =
@@ -8535,8 +8535,8 @@ iris_upload_indirect_render_state(struct iris_context *ice,
       }
    }
 
-   genX(emit_3dprimitive_was)(batch, indirect, ice->state.prim_mode, sc->count);
-   genX(maybe_emit_breakpoint)(batch, false);
+   genX(iris_emit_3dprimitive_was)(batch, indirect, ice->state.prim_mode, sc->count);
+   genX(iris_maybe_emit_breakpoint)(batch, false);
 
    iris_batch_sync_region_end(batch);
 
@@ -8891,7 +8891,7 @@ iris_upload_compute_state(struct iris_context *ice,
                          IRIS_DOMAIN_NONE);
 
 #if GFX_VER >= 12
-   genX(invalidate_aux_map_state)(batch);
+   genX(iris_invalidate_aux_map_state)(batch);
 #endif
 
 #if GFX_VERx10 >= 125
@@ -9783,7 +9783,7 @@ iris_emit_raw_pipe_control(struct iris_batch *batch,
  * We don't put this in the vtable because it's only used on Gfx9.
  */
 void
-gfx9_toggle_preemption(struct iris_context *ice,
+gfx9_iris_toggle_preemption(struct iris_context *ice,
                        struct iris_batch *batch,
                        const struct pipe_draw_info *draw)
 {
@@ -9883,7 +9883,7 @@ iris_emit_mi_report_perf_count(struct iris_batch *batch,
  *              "finest hashing mode available".
  */
 void
-genX(emit_hashing_mode)(struct iris_context *ice, struct iris_batch *batch,
+genX(iris_emit_hashing_mode)(struct iris_context *ice, struct iris_batch *batch,
                         unsigned width, unsigned height, unsigned scale)
 {
 #if GFX_VER == 9
@@ -9971,7 +9971,7 @@ iris_set_frontend_noop(struct pipe_context *ctx, bool enable)
 }
 
 void
-genX(init_screen_state)(struct iris_screen *screen)
+genX(iris_init_screen_state)(struct iris_screen *screen)
 {
    assert(screen->devinfo->verx10 == GFX_VERx10);
    screen->vtbl.destroy_state = iris_destroy_state;
@@ -10011,7 +10011,7 @@ genX(init_screen_state)(struct iris_screen *screen)
 }
 
 void
-genX(init_state)(struct iris_context *ice)
+genX(iris_init_state)(struct iris_context *ice)
 {
    struct pipe_context *ctx = &ice->ctx;
    struct iris_screen *screen = (struct iris_screen *)ctx->screen;
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index 0362d53de5e..cf444bf8170 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -1542,8 +1542,8 @@ zink_destroy_screen(struct pipe_screen *pscreen)
 
    util_idalloc_mt_fini(&screen->buffer_ids);
 
-   if (screen->loader_lib)
-      util_dl_close(screen->loader_lib);
+//   if (screen->loader_lib)
+//      util_dl_close(screen->loader_lib);
 
    if (screen->drm_fd != -1)
       close(screen->drm_fd);
@@ -3181,14 +3181,14 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
 
    u_trace_state_init();
 
-   screen->loader_lib = util_dl_open(VK_LIBNAME);
-   if (!screen->loader_lib) {
-      mesa_loge("ZINK: failed to load "VK_LIBNAME);
-      goto fail;
-   }
+//   screen->loader_lib = util_dl_open(VK_LIBNAME);
+//   if (!screen->loader_lib) {
+//      mesa_loge("ZINK: failed to load "VK_LIBNAME);
+//      goto fail;
+//   }
 
-   screen->vk_GetInstanceProcAddr = (PFN_vkGetInstanceProcAddr)util_dl_get_proc_address(screen->loader_lib, "vkGetInstanceProcAddr");
-   screen->vk_GetDeviceProcAddr = (PFN_vkGetDeviceProcAddr)util_dl_get_proc_address(screen->loader_lib, "vkGetDeviceProcAddr");
+   screen->vk_GetInstanceProcAddr = vkGetInstanceProcAddr;
+   screen->vk_GetDeviceProcAddr = vkGetDeviceProcAddr;
    if (!screen->vk_GetInstanceProcAddr ||
        !screen->vk_GetDeviceProcAddr) {
       mesa_loge("ZINK: failed to get proc address");
diff --git a/src/gallium/frontends/lavapipe/lvp_device.c b/src/gallium/frontends/lavapipe/lvp_device.c
index f982d6dc64f..3ccefe5fe8b 100644
--- a/src/gallium/frontends/lavapipe/lvp_device.c
+++ b/src/gallium/frontends/lavapipe/lvp_device.c
@@ -1380,7 +1380,12 @@ VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL lvp_GetInstanceProcAddr(
  * to work around certain LD_PRELOAD issues seen in apps.
  */
 PUBLIC
-VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vk_icdGetInstanceProcAddr(
+VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL lvp_vk_icdGetInstanceProcAddr(
+   VkInstance                                  instance,
+   const char*                                 pName);
+
+PUBLIC
+VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL lvp_vk_icdGetInstanceProcAddr(
    VkInstance                                  instance,
    const char*                                 pName)
 {
diff --git a/src/gallium/frontends/lavapipe/meson.build b/src/gallium/frontends/lavapipe/meson.build
index c24fda1bc22..678abd7047c 100644
--- a/src/gallium/frontends/lavapipe/meson.build
+++ b/src/gallium/frontends/lavapipe/meson.build
@@ -46,7 +46,12 @@ liblavapipe_st = static_library(
   [liblvp_files, lvp_entrypoints, sha1_h],
   c_args : [ c_msvc_compat_args, lvp_flags],
   gnu_symbol_visibility : 'hidden',
-  include_directories : [ inc_include, inc_src, inc_util, inc_gallium, inc_gallium_aux, inc_llvmpipe ],
-  dependencies : [ dep_llvm, idep_nir, idep_mesautil, idep_vulkan_util, idep_vulkan_wsi,
-                   idep_vulkan_runtime, lvp_deps ]
+  include_directories : [ inc_include, inc_src, inc_util, inc_gallium, inc_compiler, inc_gallium_aux, inc_llvmpipe ],
+  dependencies : [ dep_llvm,
+                   idep_nir.partial_dependency(compile_args : true, link_args : true, includes : true),
+                   idep_mesautil.partial_dependency(compile_args : true, link_args : true, includes : true),
+                   idep_vulkan_util,
+                   idep_vulkan_wsi,
+                   idep_vulkan_runtime,
+                   lvp_deps ]
 )
diff --git a/src/gallium/targets/dri/target.c b/src/gallium/targets/dri/target.c
index 415e49465df..9527c547b79 100644
--- a/src/gallium/targets/dri/target.c
+++ b/src/gallium/targets/dri/target.c
@@ -3,27 +3,26 @@
 
 #include "dri_screen.h"
 
+const __DRIextension **__driDriverGetExtensions(const char *name);
+
+const __DRIextension **__driDriverGetExtensions(const char *name)
+{
 #define DEFINE_LOADER_DRM_ENTRYPOINT(drivername)                          \
-const __DRIextension **__driDriverGetExtensions_##drivername(void);       \
-PUBLIC const __DRIextension **__driDriverGetExtensions_##drivername(void) \
+if (!strcmp(name, #drivername))                                           \
 {                                                                         \
    return galliumdrm_driver_extensions;                                   \
 }
 
 #if defined(GALLIUM_SOFTPIPE)
 
-const __DRIextension **__driDriverGetExtensions_swrast(void);
-
-PUBLIC const __DRIextension **__driDriverGetExtensions_swrast(void)
+if (!strcmp(name, "swrast"))
 {
    return galliumsw_driver_extensions;
 }
 
 #if defined(HAVE_LIBDRM)
 
-const __DRIextension **__driDriverGetExtensions_kms_swrast(void);
-
-PUBLIC const __DRIextension **__driDriverGetExtensions_kms_swrast(void)
+if (!strcmp(name, "kms_swrast"))
 {
    return dri_swrast_kms_driver_extensions;
 }
@@ -93,7 +92,7 @@ DEFINE_LOADER_DRM_ENTRYPOINT(etnaviv)
 #endif
 
 #if defined(GALLIUM_TEGRA)
-DEFINE_LOADER_DRM_ENTRYPOINT(tegra);
+DEFINE_LOADER_DRM_ENTRYPOINT(tegra)
 #endif
 
 #if defined(GALLIUM_KMSRO)
@@ -136,18 +135,17 @@ DEFINE_LOADER_DRM_ENTRYPOINT(lima)
 #endif
 
 #if defined(GALLIUM_ZINK) && !defined(__APPLE__)
-#if defined(ANDROID)
-DEFINE_LOADER_DRM_ENTRYPOINT(zink);
-#else
-const __DRIextension **__driDriverGetExtensions_zink(void);
 
-PUBLIC const __DRIextension **__driDriverGetExtensions_zink(void)
+const __DRIextension **__driDriverGetExtensions_zink(void);
 {
    return galliumvk_driver_extensions;
 }
-#endif
+
 #endif
 
 #if defined(GALLIUM_D3D12)
-DEFINE_LOADER_DRM_ENTRYPOINT(d3d12);
+DEFINE_LOADER_DRM_ENTRYPOINT(d3d12)
 #endif
+
+   return NULL;
+}
diff --git a/src/gallium/targets/lavapipe/meson.build b/src/gallium/targets/lavapipe/meson.build
index 9351505904e..04b67770c8d 100644
--- a/src/gallium/targets/lavapipe/meson.build
+++ b/src/gallium/targets/lavapipe/meson.build
@@ -6,10 +6,10 @@ libvulkan_lvp = shared_library(
   vs_module_defs : vulkan_api_def,
   include_directories : [ inc_src, inc_util, inc_include, inc_gallium, inc_gallium_aux, inc_gallium_winsys, inc_gallium_drivers ],
   link_whole : [ liblavapipe_st ],
-  link_with : [libpipe_loader_static, libgallium, libwsw, libswdri, libws_null, libswkmsdri ],
+#  link_with : [libpipe_loader_static, libgallium, libwsw, libswdri, libws_null, libswkmsdri ],
   gnu_symbol_visibility : 'hidden',
   link_args : [ld_args_bsymbolic, ld_args_gc_sections],
-  dependencies : driver_swrast,
+  dependencies : driver_swrast.partial_dependency(compile_args : true, includes : true),
   name_prefix : host_machine.system() == 'windows' ? '' : [],
   install : true,
 )
diff --git a/src/gallium/targets/lavapipe/target.c b/src/gallium/targets/lavapipe/target.c
index 7ca11854032..53150b45e74 100644
--- a/src/gallium/targets/lavapipe/target.c
+++ b/src/gallium/targets/lavapipe/target.c
@@ -1,3 +1,3 @@
-#include "target-helpers/drm_helper.h"
-#include "target-helpers/sw_helper.h"
+//#include "target-helpers/drm_helper.h"
+//#include "target-helpers/sw_helper.h"
 
diff --git a/src/gallium/targets/osmesa/meson.build b/src/gallium/targets/osmesa/meson.build
index d16e7858c63..8e9341efad0 100644
--- a/src/gallium/targets/osmesa/meson.build
+++ b/src/gallium/targets/osmesa/meson.build
@@ -55,7 +55,8 @@ libosmesa = shared_library(
     libmesa, libgallium, libws_null, osmesa_link_with,
   ],
   dependencies : [
-    dep_ws2_32, dep_selinux, dep_thread, dep_clock, dep_unwind, driver_swrast
+    dep_ws2_32, dep_selinux, dep_thread, dep_clock, dep_unwind, driver_swrast,
+    meson.get_compiler('cpp').find_library('stdc++')
   ],
   name_prefix : host_machine.system() == 'windows' ? '' : [],  # otherwise mingw will create libosmesa.dll
   soversion : host_machine.system() == 'windows' ? '' : '8',
diff --git a/src/glx/dri_common.c b/src/glx/dri_common.c
index 15b0e0fc328..938423e3b9a 100644
--- a/src/glx/dri_common.c
+++ b/src/glx/dri_common.c
@@ -55,6 +55,8 @@
 #define GL_LIB_NAME "libGL.so.1"
 #endif
 
+extern const __DRIextension **__driDriverGetExtensions(const char *driverName);
+
 /**
  * Try to \c dlopen the named driver.
  *
@@ -72,6 +74,7 @@
 _X_HIDDEN const __DRIextension **
 driOpenDriver(const char *driverName, void **out_driver_handle)
 {
+#if 0
    void *glhandle;
 
    /* Attempt to make sure libGL symbols will be visible to the driver */
@@ -88,6 +91,10 @@ driOpenDriver(const char *driverName, void **out_driver_handle)
 
    if (glhandle)
       dlclose(glhandle);
+#endif
+
+   const __DRIextension **extensions =
+      __driDriverGetExtensions(driverName);
 
    return extensions;
 }
@@ -760,8 +767,9 @@ get_driver_config(const char *driverName)
       }
    }
 
+#if 0
    dlclose(handle);
-
+#endif
    return config;
 }
 
diff --git a/src/glx/meson.build b/src/glx/meson.build
index 1a5e9833956..6f538d9242d 100644
--- a/src/glx/meson.build
+++ b/src/glx/meson.build
@@ -73,8 +73,8 @@ files_libglx = files(
   'xfont.c',
 )
 
-extra_libs_libglx = []
-extra_deps_libgl = []
+extra_libs_libglx = [libgallium_dri]
+extra_deps_libgl = [meson.get_compiler('cpp').find_library('stdc++')]
 extra_ld_args_libgl = []
 
 # dri2
diff --git a/src/intel/vulkan/anv_device.c b/src/intel/vulkan/anv_device.c
index c048b32a2f1..491f7f6005d 100644
--- a/src/intel/vulkan/anv_device.c
+++ b/src/intel/vulkan/anv_device.c
@@ -2809,7 +2809,12 @@ PFN_vkVoidFunction anv_GetInstanceProcAddr(
  * vk_icdGetInstanceProcAddr to work around certain LD_PRELOAD issues seen in apps.
  */
 PUBLIC
-VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vk_icdGetInstanceProcAddr(
+VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL intel_vk_icdGetInstanceProcAddr(
+    VkInstance                                  instance,
+    const char*                                 pName);
+
+PUBLIC
+VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL intel_vk_icdGetInstanceProcAddr(
     VkInstance                                  instance,
     const char*                                 pName)
 {
diff --git a/src/intel/vulkan/meson.build b/src/intel/vulkan/meson.build
index aee37f48887..4d224dded09 100644
--- a/src/intel/vulkan/meson.build
+++ b/src/intel/vulkan/meson.build
@@ -247,13 +247,19 @@ libvulkan_intel = shared_library(
   ],
   link_whole : [libanv_common, libanv_per_hw_ver_libs] + optional_libgrl,
   link_with : [
-    libintel_compiler, libisl, libblorp, libintel_perf,
+#    libintel_compiler, libisl, libblorp, libintel_perf,
   ],
   dependencies : [
-    dep_thread, dep_dl, dep_m, anv_deps, idep_libintel_common,
-    idep_nir, idep_genxml, idep_vulkan_util, idep_vulkan_wsi,
-    idep_vulkan_runtime, idep_mesautil, idep_xmlconfig,
-    idep_intel_driver_ds, idep_intel_dev,
+    dep_thread, dep_dl, dep_m, anv_deps,
+    idep_libintel_common.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_nir.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_genxml.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_vulkan_util, idep_vulkan_wsi,
+    idep_vulkan_runtime,
+    idep_mesautil.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_xmlconfig.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_intel_driver_ds.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_intel_dev.partial_dependency(compile_args : true, link_args : true, includes : true)
   ],
   c_args : anv_flags,
   gnu_symbol_visibility : 'hidden',
diff --git a/src/intel/vulkan_hasvk/anv_device.c b/src/intel/vulkan_hasvk/anv_device.c
index 2819dd634b2..827175d672f 100644
--- a/src/intel/vulkan_hasvk/anv_device.c
+++ b/src/intel/vulkan_hasvk/anv_device.c
@@ -2246,13 +2246,17 @@ PFN_vkVoidFunction anv_GetInstanceProcAddr(
 /* With version 1+ of the loader interface the ICD should expose
  * vk_icdGetInstanceProcAddr to work around certain LD_PRELOAD issues seen in apps.
  */
-PUBLIC
-VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vk_icdGetInstanceProcAddr(
+VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL intel_hasvk_vk_icdGetInstanceProcAddr(
+    VkInstance                                  instance,
+    const char*                                 pName);
+
+VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL intel_hasvk_vk_icdGetInstanceProcAddr(
     VkInstance                                  instance,
     const char*                                 pName)
 {
    return anv_GetInstanceProcAddr(instance, pName);
 }
+
 static struct anv_state
 anv_state_pool_emit_data(struct anv_state_pool *pool, size_t size, size_t align, const void *p)
 {
diff --git a/src/intel/vulkan_hasvk/meson.build b/src/intel/vulkan_hasvk/meson.build
index bedc1834e10..61082f78468 100644
--- a/src/intel/vulkan_hasvk/meson.build
+++ b/src/intel/vulkan_hasvk/meson.build
@@ -24,11 +24,11 @@ anv_hasvk_entrypoints = custom_target(
   output : ['anv_entrypoints.h', 'anv_entrypoints.c'],
   command : [
     prog_python, '@INPUT0@', '--xml', '@INPUT1@', '--proto', '--weak',
-    '--out-h', '@OUTPUT0@', '--out-c', '@OUTPUT1@', '--prefix', 'anv',
+    '--out-h', '@OUTPUT0@', '--out-c', '@OUTPUT1@', '--prefix', 'anv_hasvk',
     '--beta', with_vulkan_beta.to_string(),
     '--device-prefix', 'gfx7', '--device-prefix', 'gfx75',
     '--device-prefix', 'gfx8',
-    '--device-prefix', 'doom64',
+    '--device-prefix', 'doom64_hasvk',
   ],
   depend_files : vk_entrypoints_gen_depend_files,
 )
@@ -189,13 +189,20 @@ libvulkan_intel_hasvk = shared_library(
   ],
   link_whole : [libanv_hasvk_common, libanv_per_hw_ver_libs],
   link_with : [
-    libintel_compiler, libisl, libblorp, libintel_perf,
+#    libintel_compiler, libisl, libblorp, libintel_perf,
   ],
   dependencies : [
-    dep_thread, dep_dl, dep_m, anv_deps, idep_libintel_common,
-    idep_nir, idep_genxml, idep_vulkan_util, idep_vulkan_wsi,
-    idep_vulkan_runtime, idep_mesautil, idep_xmlconfig,
-    idep_intel_driver_ds, idep_intel_dev,
+    dep_thread, dep_dl, dep_m, anv_deps,
+    idep_libintel_common.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_nir.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_genxml.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_vulkan_util.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_vulkan_wsi,
+    idep_vulkan_runtime,
+    idep_mesautil.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_xmlconfig.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_intel_driver_ds.partial_dependency(compile_args : true, link_args : true, includes : true),
+    idep_intel_dev.partial_dependency(compile_args : true, link_args : true, includes : true)
   ],
   c_args : anv_flags,
   gnu_symbol_visibility : 'hidden',
diff --git a/src/nouveau/vulkan/nvk_instance.c b/src/nouveau/vulkan/nvk_instance.c
index 2fcea916fe5..56087626c78 100644
--- a/src/nouveau/vulkan/nvk_instance.c
+++ b/src/nouveau/vulkan/nvk_instance.c
@@ -172,7 +172,10 @@ nvk_GetInstanceProcAddr(VkInstance _instance, const char *pName)
 }
 
 PUBLIC VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
-vk_icdGetInstanceProcAddr(VkInstance instance, const char *pName)
+nouveau_vk_icdGetInstanceProcAddr(VkInstance instance, const char *pName);
+
+PUBLIC VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
+nouveau_vk_icdGetInstanceProcAddr(VkInstance instance, const char *pName)
 {
    return nvk_GetInstanceProcAddr(instance, pName);
 }
diff --git a/src/vulkan/runtime/meson.build b/src/vulkan/runtime/meson.build
index 6bfa1b499b1..72c7e65c1da 100644
--- a/src/vulkan/runtime/meson.build
+++ b/src/vulkan/runtime/meson.build
@@ -120,9 +120,9 @@ vulkan_runtime_files = files(
 
 vulkan_runtime_deps = [
   vulkan_wsi_deps,
-  idep_mesautil,
+  idep_mesautil.partial_dependency(compile_args : true, link_args : true, includes : true),
   idep_nir_headers,
-  idep_vulkan_util,
+  idep_vulkan_util.partial_dependency(compile_args : true, link_args : true, includes : true),
 ]
 
 if with_vk_compiler
@@ -256,6 +256,7 @@ libvulkan_runtime = static_library(
   c_args : c_msvc_compat_args,
   gnu_symbol_visibility : 'hidden',
   build_by_default : false,
+  install : true
 )
 
 idep_vulkan_runtime_headers = declare_dependency(
@@ -272,14 +273,14 @@ idep_vulkan_common_entrypoints_h = declare_dependency(
 # https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/10506
 if get_option('backend').startswith('vs')
   idep_vulkan_runtime = declare_dependency(
-    link_with : libvulkan_runtime,
+#    link_with : libvulkan_runtime,
     dependencies : idep_vulkan_runtime_headers
   )
 else
   idep_vulkan_runtime = declare_dependency(
     # Instruct users of this library to link with --whole-archive.  Otherwise,
     # our weak function overloads may not resolve properly.
-    link_whole : libvulkan_runtime,
+#    link_whole : libvulkan_runtime,
     dependencies : idep_vulkan_runtime_headers
   )
 endif
diff --git a/src/vulkan/util/meson.build b/src/vulkan/util/meson.build
index 90ebfd6fb71..58e673f35ce 100644
--- a/src/vulkan/util/meson.build
+++ b/src/vulkan/util/meson.build
@@ -123,10 +123,13 @@ libvulkan_util = static_library(
   [files_vulkan_util, vk_dispatch_table, vk_enum_to_str,
    vk_struct_type_cast, vk_extensions],
   include_directories : [inc_include, inc_src],
-  dependencies : [vulkan_wsi_deps, idep_mesautil, idep_nir_headers],
+  dependencies : [vulkan_wsi_deps,
+                  idep_mesautil.partial_dependency(compile_args : true, link_args : true, includes : true),
+                  idep_nir_headers],
   c_args : [c_msvc_compat_args],
   gnu_symbol_visibility : 'hidden',
   build_by_default : false,
+  install : true
 )
 
 idep_vulkan_util_headers = declare_dependency(
@@ -136,6 +139,6 @@ idep_vulkan_util_headers = declare_dependency(
 )
 
 idep_vulkan_util = declare_dependency(
-  link_with : libvulkan_util,
+#  link_with : libvulkan_util,
   dependencies : idep_vulkan_util_headers
 )
diff --git a/src/vulkan/wsi/meson.build b/src/vulkan/wsi/meson.build
index c8206eac996..395f234a8ac 100644
--- a/src/vulkan/wsi/meson.build
+++ b/src/vulkan/wsi/meson.build
@@ -65,10 +65,12 @@ libvulkan_wsi = static_library(
   include_directories : [inc_include, inc_src],
   dependencies : [
     vulkan_wsi_deps, dep_libdrm, dep_libudev, idep_vulkan_util_headers,
-    idep_vulkan_runtime_headers, idep_xmlconfig, idep_mesautil, platform_deps
+#    idep_vulkan_runtime_headers, idep_xmlconfig, idep_mesautil, platform_deps
+    idep_vulkan_runtime_headers
   ],
   gnu_symbol_visibility : 'hidden',
   build_by_default : false,
+  install : true
 )
 
 idep_vulkan_wsi_headers = declare_dependency(
@@ -85,14 +87,14 @@ idep_vulkan_wsi_entrypoints_h = declare_dependency(
 # https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/10506
 if get_option('backend').startswith('vs')
   idep_vulkan_wsi = declare_dependency(
-    link_with : libvulkan_wsi,
+#    link_with : libvulkan_wsi,
     dependencies : idep_vulkan_wsi_headers
   )
 else
   idep_vulkan_wsi = declare_dependency(
     # Instruct users of this library to link with --whole-archive.  Otherwise,
     # our weak function overloads may not resolve properly.
-    link_whole : libvulkan_wsi,
+#    link_whole : libvulkan_wsi,
     dependencies : [
       idep_vulkan_wsi_headers, dep_libudev
     ]
