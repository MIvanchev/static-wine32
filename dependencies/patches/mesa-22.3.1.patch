diff --git a/src/gallium/targets/dri/target.c b/src/gallium/targets/dri/target.c
index d506869cbb4..31ce65652f2 100644
--- a/src/gallium/targets/dri/target.c
+++ b/src/gallium/targets/dri/target.c
@@ -3,27 +3,26 @@
 
 #include "dri_screen.h"
 
+const __DRIextension **__driDriverGetExtensions(const char *name);
+
+const __DRIextension **__driDriverGetExtensions(const char *name)
+{
 #define DEFINE_LOADER_DRM_ENTRYPOINT(drivername)                          \
-const __DRIextension **__driDriverGetExtensions_##drivername(void);       \
-PUBLIC const __DRIextension **__driDriverGetExtensions_##drivername(void) \
+if (!strcmp(name, #drivername))                                           \
 {                                                                         \
    return galliumdrm_driver_extensions;                                   \
 }
 
 #if defined(GALLIUM_SOFTPIPE)
 
-const __DRIextension **__driDriverGetExtensions_swrast(void);
-
-PUBLIC const __DRIextension **__driDriverGetExtensions_swrast(void)
+if (!strcmp(name, "swrast"))
 {
    return galliumsw_driver_extensions;
 }
 
 #if defined(HAVE_LIBDRM)
 
-const __DRIextension **__driDriverGetExtensions_kms_swrast(void);
-
-PUBLIC const __DRIextension **__driDriverGetExtensions_kms_swrast(void)
+if (!strcmp(name, "kms_swrast"))
 {
    return dri_swrast_kms_driver_extensions;
 }
@@ -93,7 +92,7 @@ DEFINE_LOADER_DRM_ENTRYPOINT(etnaviv)
 #endif
 
 #if defined(GALLIUM_TEGRA)
-DEFINE_LOADER_DRM_ENTRYPOINT(tegra);
+DEFINE_LOADER_DRM_ENTRYPOINT(tegra)
 #endif
 
 #if defined(GALLIUM_KMSRO)
@@ -129,18 +128,17 @@ DEFINE_LOADER_DRM_ENTRYPOINT(lima)
 #endif
 
 #if defined(GALLIUM_ZINK) && !defined(__APPLE__)
-#if defined(ANDROID)
-DEFINE_LOADER_DRM_ENTRYPOINT(zink);
-#else
-const __DRIextension **__driDriverGetExtensions_zink(void);
 
-PUBLIC const __DRIextension **__driDriverGetExtensions_zink(void)
+const __DRIextension **__driDriverGetExtensions_zink(void);
 {
    return galliumvk_driver_extensions;
 }
-#endif
+
 #endif
 
 #if defined(GALLIUM_D3D12)
-DEFINE_LOADER_DRM_ENTRYPOINT(d3d12);
+DEFINE_LOADER_DRM_ENTRYPOINT(d3d12)
 #endif
+
+   return NULL;
+}
diff --git a/src/glx/dri_common.c b/src/glx/dri_common.c
index 94e264cc07f..7e7659e0656 100644
--- a/src/glx/dri_common.c
+++ b/src/glx/dri_common.c
@@ -55,6 +55,8 @@
 #define GL_LIB_NAME "libGL.so.1"
 #endif
 
+extern const __DRIextension **__driDriverGetExtensions(const char *driverName);
+
 /**
  * Try to \c dlopen the named driver.
  *
@@ -72,6 +74,7 @@
 _X_HIDDEN const __DRIextension **
 driOpenDriver(const char *driverName, void **out_driver_handle)
 {
+#if 0
    void *glhandle;
 
    /* Attempt to make sure libGL symbols will be visible to the driver */
@@ -88,6 +91,10 @@ driOpenDriver(const char *driverName, void **out_driver_handle)
 
    if (glhandle)
       dlclose(glhandle);
+#endif
+
+   const __DRIextension **extensions =
+      __driDriverGetExtensions(driverName);
 
    return extensions;
 }
@@ -342,7 +349,7 @@ driFetchDrawable(struct glx_context *gc, GLXDrawable glxDrawable)
    Display *dpy = gc->psc->dpy;
    struct glx_display *const priv = __glXInitialize(dpy);
    __GLXDRIdrawable *pdraw;
-   struct glx_screen *psc = gc->psc;
+   struct glx_screen *psc;
    struct glx_config *config = gc->config;
    unsigned int type;
 
@@ -352,6 +359,7 @@ driFetchDrawable(struct glx_context *gc, GLXDrawable glxDrawable)
    if (glxDrawable == None)
       return NULL;
 
+   psc = priv->screens[gc->screen];
    if (priv->drawHash == NULL)
       return NULL;
 
@@ -365,7 +373,7 @@ driFetchDrawable(struct glx_context *gc, GLXDrawable glxDrawable)
 
    /* if this is a no-config context, infer the fbconfig from the drawable */
    if (config == NULL)
-      config = driInferDrawableConfig(psc, glxDrawable);
+      config = driInferDrawableConfig(gc->psc, glxDrawable);
    if (config == NULL)
       return NULL;
 
@@ -416,7 +424,14 @@ driFetchDrawable(struct glx_context *gc, GLXDrawable glxDrawable)
       (*pdraw->destroyDrawable) (pdraw);
       return NULL;
    }
-   pdraw->refcount = 1;
+   /* This sure does look suspicious, doesn't it? We're on this path because
+    * this is a naked Window. GLX 1.3 drawables have an explicit creation
+    * step (setting refcount to 1), and those we would have found in the
+    * hash lookup above, bumped their refcount for the bind_context we're
+    * being called for, and then returned. But since we just created the
+    * internal naked-Window state, we need to account for both here.
+    */
+   pdraw->refcount = 2;
 
    return pdraw;
 }
@@ -490,7 +505,7 @@ releaseDrawable(const struct glx_display *priv, GLXDrawable drawable)
 _X_HIDDEN void
 driReleaseDrawables(struct glx_context *gc)
 {
-   const struct glx_display *priv = gc->psc->display;
+   const struct glx_display *priv = (gc && gc->psc) ? gc->psc->display : NULL;
 
    if (priv == NULL)
       return;
@@ -758,7 +773,7 @@ get_driver_config(const char *driverName)
          break;
       }
    }
-
+#if 0
    if (!config) {
       /* Fall back to the old method */
       config = dlsym(handle, "__driConfigOptions");
@@ -767,7 +782,7 @@ get_driver_config(const char *driverName)
    }
 
    dlclose(handle);
-
+#endif
    return config;
 }
 
